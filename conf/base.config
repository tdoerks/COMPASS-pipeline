/*
 * -------------------------------------------------
 *  Base Configuration
 * -------------------------------------------------
 * Default resource requirements for all processes.
 * Can be overridden by HPC-specific configs.
 */

params {
    // Maximum resource limits - will be used as upper bounds for retries
    max_cpus = 48
    max_memory = 256.GB
    max_time = 240.h
}

process {
    // Global error/retry strategy
    errorStrategy = { task.exitStatus in [143,137,104,134,139,140] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'

    // Automatic retry with increased resources
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }

    // Resource allocations for each process
    // These will scale up on retry (2x memory, 1x cpus per retry)

    withName: 'DOWNLOAD_AMRFINDER_DB' {
        cpus = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 30.m * task.attempt, 'time' ) }
    }

    withName: 'AMRFINDER' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'VIBRANT' {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName: 'DOWNLOAD_PROPHAGE_DB' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withName: 'DIAMOND_PROPHAGE' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'CHECKV' {
        cpus = { check_max( 2, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withName: 'PHANOTATE' {
        cpus = { check_max( 2, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withName: 'DOWNLOAD_NARMS_METADATA' {
        cpus = { check_max( 1, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 30.m * task.attempt, 'time' ) }
    }

    withName: 'FILTER_NARMS_SAMPLES' {
        cpus = { check_max( 1, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 30.m * task.attempt, 'time' ) }
    }

    withName: 'DOWNLOAD_SRA' {
        cpus = { check_max( 4, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withName: 'ASSEMBLE_SPADES' {
        cpus = { check_max( 8, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName: 'COMBINE_RESULTS' {
        cpus = { check_max( 1, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 30.m * task.attempt, 'time' ) }
    }
}

// Function to check resource limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
