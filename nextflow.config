/*
 * -------------------------------------------------
 *  COMPASS Pipeline - Main Configuration
 * -------------------------------------------------
 * Comprehensive Omics Analysis of Salmonella and Phages
 */

// Pipeline parameters
params {
    // Input/output
    input = "samplesheet.csv"
    outdir = "results"

    // Metadata filtering parameters
    filter_state = "KS"           // State code (e.g., "KS", "CA", "TX")
    filter_year_start = null      // Minimum year (e.g., 2020)
    filter_year_end = null        // Maximum year (e.g., 2023)
    filter_source = null          // Source pattern (e.g., "chicken", "clinical")

    // AMR parameters
    amrfinder_db = ""

    // Phage parameters
    prophage_db = "/homes/tylerdoe/databases/prophage_db.dmnd"
    checkv_db = "/homes/tylerdoe/databases/checkv-db-v1.5"
}

// Load base configuration for all profiles
includeConfig 'conf/base.config'

// Profile definitions
profiles {
    standard {
        // Standard profile for local execution
        process.executor = 'local'
    }

    beocat {
        // Kansas State University's Beocat cluster
        includeConfig 'conf/beocat.config'
    }

    ceres {
        // USDA ARS SCINet Ceres cluster
        includeConfig 'conf/ceres.config'
    }

    test {
        // Quick test profile with minimal resources
        process.executor = 'local'
        params.input = "test_samplesheet.csv"
        params.outdir = "test_results"
    }
}

// Manifest
manifest {
    name = 'COMPASS-pipeline'
    author = 'Tyler Doerks'
    description = 'Comprehensive Omics Analysis of Salmonella and Phages'
    mainScript = 'main.nf'
    nextflowVersion = '>=23.04.0'
    version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
